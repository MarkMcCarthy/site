<?php
/**
 * @file
 * Code for the Tools feature.
 */

include_once 'hr_tools.features.inc';


/**
 * Implements hook_menu().
 */
function hr_tools_menu() {
  $items = array();

  $items['xyzzy/stats/%'] = array(
    'title' => 'Performance stats',
    'page callback' => 'hr_tools_performace_stats',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'description' => 'Performance statistics',
  );

  return $items;
}

/**
 * Return performance statistics.
 *
 * Call curl http://0.0.0.0:8088/xyzzy/stats/1 | python -m json.tool
 */
function hr_tools_performace_stats($param) {
  $data = _hr_tools_performace_stats($param);
  $output = array();

  foreach ($data['timers'] as $label => $timer) {
    $output[] = array(
      'timestamp' => REQUEST_TIME,
      'label' => $label,
      'time' => $timer['time'],
      'type' => $timer['type'],
      'exception' => isset($timer['exception']) ? $timer['exception'] : '',
    );
  }

  drupal_json_output($output);
}

/**
 * Return performance statistics.
 *
 * Call curl http://0.0.0.0:8088/xyzzy/stats/1 | python -m json.tool
 */
function _hr_tools_performace_stats($param) {
  drupal_set_time_limit(300);

  // Capture external calls.
  global $conf;
  $conf['drupal_http_request_function'] = 'hr_tools_drupal_http_request';

  global $timers;

  $exceptions = array();

  // Disable page caching.
  drupal_page_is_cacheable(FALSE);

  // Time to render a group page.
  $timer = '0011 - Load group 1337 with reset';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Load node reset';
    $node = node_load(1337, NULL, TRUE);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0012 - Load group 1337 with cache';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Load node';
    $node = node_load(1337, NULL, FALSE);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0013 - Node view group 1337';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'View node';
    $output = node_view($node);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  // Time to render a node.
  $timer = '0021 - Load node 1138 with reset';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Load node reset';
    $node = node_load(1138, NULL, TRUE);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0022 - Load node 1138 with cache';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Load node';
    $node = node_load(1138, NULL, FALSE);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0023 - Node view 1138';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'View node';
    $output = node_view($node);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0022 - Save node 1138';
  try {
    $node = node_load(1138, NULL, FALSE);
    timer_start($timer);
    $timers[$timer]['type'] = 'Save node';
    node_save($node);
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  // Time to render empty page.
  $timer = '0031 - Render empty page';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Render page';
    $output = drupal_render_page('');
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  // Time to query database.
  $timer = '0041 - Query database: first node record';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Database';
    db_query('select * from {node} limit 1');
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0042 - Query database: first document record';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Database';
    db_query("select * from {node} where type='hr_document' limit 1");
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0042 - Query database: first document record ordered';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Database';
    db_query("select * from {node} where type='hr_document' order by nid asc limit 1");
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  $timer = '0042 - Query database: first document record ordered reversed';
  try {
    timer_start($timer);
    $timers[$timer]['type'] = 'Database';
    db_query("select * from {node} where type='hr_document' order by nid desc limit 1");
    timer_stop($timer);
  }
  catch (Exception $e) {
    $timers[$timer]['exception'] = $e->getMessage();
  }

  // Random nodes rendering.
  $content_types = node_type_get_names();
  $counter = 0;
  foreach ($content_types as $id => $name) {
    $counter++;
    $prefix = '01' . str_pad($counter, 2, '0', STR_PAD_LEFT);
    $timer = $prefix . '1 - Query database: get 5 random nodes of type ' . $name;
    try {
      timer_start($timer);
      $timers[$timer]['type'] = 'Database';
      $results = db_query("SELECT nid FROM {node} WHERE type = :type AND status = 1 ORDER BY RANDOM() LIMIT 5", array(
        ':type' => $id,
      ));
      timer_stop($timer);

      foreach ($results as $result) {
        $timer = $prefix . '2 - Load node ' . $result->nid;
        timer_start($timer);
        $timers[$timer]['type'] = 'Load node';
        $node = node_load($result->nid);
        timer_stop($timer);

        $timer = $prefix . '3 - Render node ' . $result->nid;
        timer_start($timer);
        $timers[$timer]['type'] = 'View node';
        $output = node_view($node);
        timer_stop($timer);
      }
    }
    catch (Exception $e) {
      $timers[$timer]['exception'] = $e->getMessage();
    }

  }

  // Stop drupal page timer.
  timer_stop('page');

  global $hr_tools_external_calls;

  // Remove sensitive data.
  if ($hr_tools_external_calls) {
    foreach ($hr_tools_external_calls as $key => $hr_tools_external_call) {
      if (isset($hr_tools_external_call['options']['headers'])) {
        unset($hr_tools_external_calls[$key]['options']['headers']);
      }
      if (isset($hr_tools_external_call['options']['query']['_access_key'])) {
        unset($hr_tools_external_calls[$key]['options']['query']['_access_key']);
        $hr_tools_external_calls[$key]['url'] = substr($hr_tools_external_calls[$key]['url'], 0, strpos($hr_tools_external_calls[$key]['url'], '_access_key'));
      }
    }
  }

  return array(
    'timestamp' => REQUEST_TIME,
    'timers' => $timers,
    'external_calls' => $hr_tools_external_calls,
    'exceptions' => $exceptions,
  );
}

function hr_tools_drupal_http_request($url, array $options = array()) {
  global $hr_tools_external_calls;
  $hr_tools_external_calls[] = array(
    'url' => $url,
    'options' => $options,
  );

  $result = new stdClass();

  // Parse the URL and make sure we can handle the schema.
  $uri = @parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;
    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    $result->code = -1002;
    return $result;
  }

  timer_start(__FUNCTION__);

  // Merge the default options.
  $options += array(
    'headers' => array(),
    'method' => 'GET',
    'data' => NULL,
    'max_redirects' => 3,
    'timeout' => 30.0,
    'context' => NULL,
  );

  // Merge the default headers.
  $options['headers'] += array(
    'User-Agent' => 'Drupal (+http://drupal.org/)',
  );

  // stream_socket_client() requires timeout to be a float.
  $options['timeout'] = (float) $options['timeout'];

  // Use a proxy if one is defined and the host is not on the excluded list.
  $proxy_server = variable_get('proxy_server', '');
  if ($proxy_server && _drupal_http_use_proxy($uri['host'])) {
    // Set the scheme so we open a socket to the proxy server.
    $uri['scheme'] = 'proxy';
    // Set the path to be the full URL.
    $uri['path'] = $url;
    // Since the URL is passed as the path, we won't use the parsed query.
    unset($uri['query']);

    // Add in username and password to Proxy-Authorization header if needed.
    if ($proxy_username = variable_get('proxy_username', '')) {
      $proxy_password = variable_get('proxy_password', '');
      $options['headers']['Proxy-Authorization'] = 'Basic ' . base64_encode($proxy_username . (!empty($proxy_password) ? ":" . $proxy_password : ''));
    }
    // Some proxies reject requests with any User-Agent headers, while others
    // require a specific one.
    $proxy_user_agent = variable_get('proxy_user_agent', '');
    // The default value matches neither condition.
    if ($proxy_user_agent === NULL) {
      unset($options['headers']['User-Agent']);
    }
    elseif ($proxy_user_agent) {
      $options['headers']['User-Agent'] = $proxy_user_agent;
    }
  }

  switch ($uri['scheme']) {
    case 'proxy':
      // Make the socket connection to a proxy server.
      $socket = 'tcp://' . $proxy_server . ':' . variable_get('proxy_port', 8080);
      // The Host header still needs to match the real request.
      $options['headers']['Host'] = $uri['host'];
      $options['headers']['Host'] .= isset($uri['port']) && $uri['port'] != 80 ? ':' . $uri['port'] : '';
      break;

    case 'http':
    case 'feed':
      $port = isset($uri['port']) ? $uri['port'] : 80;
      $socket = 'tcp://' . $uri['host'] . ':' . $port;
      // RFC 2616: "non-standard ports MUST, default ports MAY be included".
      // We don't add the standard port to prevent from breaking rewrite rules
      // checking the host that do not take into account the port number.
      $options['headers']['Host'] = $uri['host'] . ($port != 80 ? ':' . $port : '');
      break;

    case 'https':
      // Note: Only works when PHP is compiled with OpenSSL support.
      $port = isset($uri['port']) ? $uri['port'] : 443;
      $socket = 'ssl://' . $uri['host'] . ':' . $port;
      $options['headers']['Host'] = $uri['host'] . ($port != 443 ? ':' . $port : '');
      break;

    default:
      $result->error = 'invalid schema ' . $uri['scheme'];
      $result->code = -1003;
      return $result;
  }

  if (empty($options['context'])) {
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout']);
  }
  else {
    // Create a stream with context. Allows verification of a SSL certificate.
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout'], STREAM_CLIENT_CONNECT, $options['context']);
  }

  // Make sure the socket opened properly.
  if (!$fp) {
    // When a network error occurs, we use a negative number so it does not
    // clash with the HTTP status codes.
    $result->code = -$errno;
    $result->error = trim($errstr) ? trim($errstr) : t('Error opening socket @socket', array('@socket' => $socket));

    // Mark that this request failed. This will trigger a check of the web
    // server's ability to make outgoing HTTP requests the next time that
    // requirements checking is performed.
    // See system_requirements().
    variable_set('drupal_http_request_fails', TRUE);

    return $result;
  }

  // Construct the path to act on.
  $path = isset($uri['path']) ? $uri['path'] : '/';
  if (isset($uri['query'])) {
    $path .= '?' . $uri['query'];
  }

  // Only add Content-Length if we actually have any content or if it is a POST
  // or PUT request. Some non-standard servers get confused by Content-Length in
  // at least HEAD/GET requests, and Squid always requires Content-Length in
  // POST/PUT requests.
  $content_length = strlen($options['data']);
  if ($content_length > 0 || $options['method'] == 'POST' || $options['method'] == 'PUT') {
    $options['headers']['Content-Length'] = $content_length;
  }

  // If the server URL has a user then attempt to use basic authentication.
  if (isset($uri['user'])) {
    $options['headers']['Authorization'] = 'Basic ' . base64_encode($uri['user'] . (isset($uri['pass']) ? ':' . $uri['pass'] : ':'));
  }

  // If the database prefix is being used by SimpleTest to run the tests in a copied
  // database then set the user-agent header to the database prefix so that any
  // calls to other Drupal pages will run the SimpleTest prefixed database. The
  // user-agent is used to ensure that multiple testing sessions running at the
  // same time won't interfere with each other as they would if the database
  // prefix were stored statically in a file or database variable.
  $test_info = &$GLOBALS['drupal_test_info'];
  if (!empty($test_info['test_run_id'])) {
    $options['headers']['User-Agent'] = drupal_generate_test_ua($test_info['test_run_id']);
  }

  $request = $options['method'] . ' ' . $path . " HTTP/1.0\r\n";
  foreach ($options['headers'] as $name => $value) {
    $request .= $name . ': ' . trim($value) . "\r\n";
  }
  $request .= "\r\n" . $options['data'];
  $result->request = $request;
  // Calculate how much time is left of the original timeout value.
  $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
  if ($timeout > 0) {
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    fwrite($fp, $request);
  }

  // Fetch response. Due to PHP bugs like http://bugs.php.net/bug.php?id=43782
  // and http://bugs.php.net/bug.php?id=46049 we can't rely on feof(), but
  // instead must invoke stream_get_meta_data() each iteration.
  $info = stream_get_meta_data($fp);
  $alive = !$info['eof'] && !$info['timed_out'];
  $response = '';

  while ($alive) {
    // Calculate how much time is left of the original timeout value.
    $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
    if ($timeout <= 0) {
      $info['timed_out'] = TRUE;
      break;
    }
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    $chunk = fread($fp, 1024);
    $response .= $chunk;
    $info = stream_get_meta_data($fp);
    $alive = !$info['eof'] && !$info['timed_out'] && $chunk;
  }
  fclose($fp);

  if ($info['timed_out']) {
    $result->code = HTTP_REQUEST_TIMEOUT;
    $result->error = 'request timed out';
    return $result;
  }
  // Parse response headers from the response body.
  // Be tolerant of malformed HTTP responses that separate header and body with
  // \n\n or \r\r instead of \r\n\r\n.
  list($response, $result->data) = preg_split("/\r\n\r\n|\n\n|\r\r/", $response, 2);
  $response = preg_split("/\r\n|\n|\r/", $response);

  // Parse the response status line.
  $response_status_array = _drupal_parse_response_status(trim(array_shift($response)));
  $result->protocol = $response_status_array['http_version'];
  $result->status_message = $response_status_array['reason_phrase'];
  $code = $response_status_array['response_code'];

  $result->headers = array();

  // Parse the response headers.
  while ($line = trim(array_shift($response))) {
    list($name, $value) = explode(':', $line, 2);
    $name = strtolower($name);
    if (isset($result->headers[$name]) && $name == 'set-cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$name] .= ',' . trim($value);
    }
    else {
      $result->headers[$name] = trim($value);
    }
  }

  $responses = array(
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  );
  // RFC 2616 states that all unknown HTTP codes must be treated the same as the
  // base code in their class.
  if (!isset($responses[$code])) {
    $code = floor($code / 100) * 100;
  }
  $result->code = $code;

  switch ($code) {
    case 200: // OK
    case 201: // Created
    case 202: // Accepted
    case 203: // Non-Authoritative Information
    case 204: // No Content
    case 205: // Reset Content
    case 206: // Partial Content
    case 304: // Not modified
      break;
    case 301: // Moved permanently
    case 302: // Moved temporarily
    case 307: // Moved temporarily
      $location = $result->headers['location'];
      $options['timeout'] -= timer_read(__FUNCTION__) / 1000;
      if ($options['timeout'] <= 0) {
        $result->code = HTTP_REQUEST_TIMEOUT;
        $result->error = 'request timed out';
      }
      elseif ($options['max_redirects']) {
        // Redirect to the new location.
        $options['max_redirects']--;
        $result = drupal_http_request($location, $options);
        $result->redirect_code = $code;
      }
      if (!isset($result->redirect_url)) {
        $result->redirect_url = $location;
      }
      break;
    default:
      $result->error = $result->status_message;
  }

  $last = array_pop($hr_tools_external_calls);
  $last['timing'] = timer_stop(__FUNCTION__);
  $hr_tools_external_calls[] = $last;

  return $result;
}
